<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.8.0" version="1.0">
  This file is intended to be loaded by Logisim-evolution v3.8.0(https://github.com/logisim-evolution/).

  <lib desc="#Wiring" name="0">
    <tool name="Pin">
      <a name="appearance" val="classic"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4"/>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7"/>
  <lib desc="#Base" name="8"/>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11"/>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Poke Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool"/>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="simulationFrequency" val="1.0"/>
    <comp lib="0" loc="(110,190)" name="Pin">
      <a name="appearance" val="classic"/>
      <a name="label" val="WE"/>
    </comp>
    <comp lib="0" loc="(110,270)" name="Pin">
      <a name="appearance" val="classic"/>
      <a name="label" val="D"/>
    </comp>
    <comp lib="0" loc="(110,330)" name="Pin">
      <a name="appearance" val="classic"/>
      <a name="label" val="OE"/>
    </comp>
    <comp lib="0" loc="(110,370)" name="Clock">
      <a name="label" val="CLK"/>
    </comp>
    <comp lib="0" loc="(110,410)" name="Pin">
      <a name="appearance" val="classic"/>
      <a name="label" val="RESET"/>
    </comp>
    <comp lib="1" loc="(190,190)" name="NOT Gate"/>
    <comp lib="1" loc="(280,170)" name="AND Gate"/>
    <comp lib="1" loc="(280,250)" name="AND Gate"/>
    <comp lib="1" loc="(370,210)" name="OR Gate"/>
    <comp lib="1" loc="(640,210)" name="Controlled Buffer"/>
    <comp lib="4" loc="(450,200)" name="D Flip-Flop">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp lib="8" loc="(402,199)" name="Text">
      <a name="text" val="temp_D"/>
    </comp>
    <comp lib="8" loc="(532,240)" name="Text">
      <a name="text" val="QNOT"/>
    </comp>
    <comp lib="8" loc="(687,200)" name="Text">
      <a name="text" val="DOUT"/>
    </comp>
    <wire from="(110,190)" to="(140,190)"/>
    <wire from="(110,270)" to="(230,270)"/>
    <wire from="(110,330)" to="(630,330)"/>
    <wire from="(110,370)" to="(400,370)"/>
    <wire from="(110,410)" to="(470,410)"/>
    <wire from="(140,190)" to="(140,230)"/>
    <wire from="(140,190)" to="(160,190)"/>
    <wire from="(140,230)" to="(230,230)"/>
    <wire from="(190,190)" to="(230,190)"/>
    <wire from="(200,150)" to="(230,150)"/>
    <wire from="(200,70)" to="(200,150)"/>
    <wire from="(200,70)" to="(560,70)"/>
    <wire from="(280,170)" to="(300,170)"/>
    <wire from="(280,250)" to="(300,250)"/>
    <wire from="(300,170)" to="(300,190)"/>
    <wire from="(300,190)" to="(320,190)"/>
    <wire from="(300,230)" to="(300,250)"/>
    <wire from="(300,230)" to="(320,230)"/>
    <wire from="(370,210)" to="(440,210)"/>
    <wire from="(400,250)" to="(400,370)"/>
    <wire from="(400,250)" to="(440,250)"/>
    <wire from="(470,260)" to="(470,410)"/>
    <wire from="(500,210)" to="(560,210)"/>
    <wire from="(500,250)" to="(550,250)"/>
    <wire from="(560,210)" to="(620,210)"/>
    <wire from="(560,70)" to="(560,210)"/>
    <wire from="(630,220)" to="(630,330)"/>
    <wire from="(640,210)" to="(720,210)"/>
  </circuit>
  <vhdl name="dff">library ieee;&#13;
use ieee.std_logic_1164.all;&#13;
&#13;
entity dff is&#13;
  port (&#13;
    CLK   : in std_logic;&#13;
    D   : in std_logic;&#13;
    RESET : in std_logic;&#13;
    Q  : out std_logic;&#13;
    QNOT: out std_logic&#13;
  );&#13;
end dff;&#13;
&#13;
architecture behv of dff is&#13;
begin&#13;
&#13;
  process(CLK, RESET)&#13;
  begin&#13;
    if (RESET = '1') then&#13;
      Q &lt;= '0';&#13;
      QNOT &lt;= '1';&#13;
    elsif rising_edge(CLK) then&#13;
      Q &lt;= D;&#13;
      QNOT &lt;= not D;&#13;
    end if;&#13;
  end process;&#13;
&#13;
end behv;&#13;
</vhdl>
  <vhdl name="tristate">library ieee;&#13;
use ieee.std_logic_1164.all;&#13;
&#13;
entity tristate is&#13;
  port (&#13;
    A: in std_logic;&#13;
    EN: in std_logic;&#13;
    Y: out std_logic&#13;
  );&#13;
end tristate;&#13;
&#13;
architecture arch of tristate is&#13;
begin&#13;
    tristate_process: process(A, EN)&#13;
    begin&#13;
        if (EN = '1') then&#13;
            Y &lt;= A;&#13;
        else&#13;
            Y &lt;= 'Z'; -- Use 'Z' for tristate&#13;
        end if;&#13;
    end process tristate_process;&#13;
end arch;&#13;
</vhdl>
  <vhdl name="memoryCell">library ieee;&#13;
use ieee.std_logic_1164.all;&#13;
&#13;
entity memoryCell is&#13;
  port (&#13;
    CLK   : in std_logic;&#13;
    D   : in std_logic;&#13;
    RESET : in std_logic;&#13;
    WE: in std_logic; -- write enable&#13;
    OE: in std_logic; -- output enable&#13;
    Q  : out std_logic;&#13;
    QNOT: out std_logic;&#13;
    DOUT: out std_logic -- output of tristate buffer stage&#13;
  ) ;&#13;
end memoryCell&#13;;
&#13;
architecture mem of memoryCell is&#13;
&#13;
    signal temp_D: std_logic;&#13;
    begin&#13;
        temp_D &lt;= ((not WE) and Q) or (WE and D);&#13;
        dff_inst: dff&#13;
        PORT(&#13;
            CLK  =&gt; CLK,&#13;
            D =&gt; temp_D,&#13;
            RESET =&gt; RESET,&#13;
            Q =&gt; Q,&#13;
            QNOT =&gt; QNOT&#13;
        );&#13;
&#13;
        tri_inst: tristate&#13;
        PORT(&#13;
            A =&gt; Q, &#13;
            EN =&gt; OE,&#13;
            Y =&gt; DOUT&#13;
        );&#13;
end mem;
</vhdl>
</project>
